name: Create new Release
on:
  workflow_call:
    inputs:
      ref:
        type: string
        required: false
        default: "${{ github.ref }}"
      ref_name:
        type: string
        required: false
        default: "${{ github.ref_name }}"
  push:
    tags:
      - 'v*.*.*'
      - '!*-grape'

jobs:
  generate_versioned_assets:
    name: Generated Versioned Assets
    runs-on: ubuntu-latest

    services:
      selenium:
        image: selenium/standalone-chrome

    steps:
      - uses: actions/checkout@v3
        with:
          ref: "${{ inputs.ref_name }}"

      - name: Configure ImageMagick
        run: |
          # get rid of the very strict defaults - let convert do its thing
          sudo rm /etc/ImageMagick*/policy.xml

      - name: Setup Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Python dependencies
        run: |
          pip install .[dev]

      - name: Generate tutorial gif
        run: |
          lookatme --tutorial --output tutorial.gif --format gif

      - name: Upload tutorial gif artifact
        uses: actions/upload-artifact@v3
        with:
          name: tutorial.gif
          path: tutorial.gif

  publish_new_pages:
    if: startsWith(github.ref_name, 'v3.0')
    uses: ./.github/workflows/pages.yml
    secrets: inherit
    with:
      ref_name: "${{ inputs.ref_name }}"

  publish_to_pypi:
    name: Build and publish to PyPI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: "${{ inputs.ref_name }}"
      - name: Setup Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Install pypa/build
        run: python -m pip install build --user
      - name: Build binary wheel + tarball
        run: python -m build --sdist --wheel --outdir dist/
      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

  create_github_release:
    needs: generate_versioned_assets
    name: Create new Release on GitHub
    runs-on: ubuntu-latest
    steps:
      - name: Download tutorial.gif
        uses: actions/download-artifact@v3
        with:
          name: tutorial.gif

      - uses: actions/github-script@v6
        with:
          script: |
            const fs = require("fs/promises");

            function semVerSort(a, b) {
              const aParts = a.split(/\.|rc/).map(x => x.replace(/^[^\d]*/, ''));
              const bParts = b.split(/\.|rc/).map(x => x.replace(/^[^\d]*/, ''));

              let max = Math.max(aParts.length, bParts.length);
              let aPart = 0;
              let bPart = 0;
              for (let idx = 0; idx < max; idx++) {
                aPart = parseInt(aParts[idx]) || Number.MIN_VALUE;
                bPart = parseInt(bParts[idx]) || Number.MIN_VALUE;

                if (aPart != bPart) {
                  break;
                }
              }

              return aPart - bPart;
            }

            let currTag = "${{ inputs.ref_name }}";
            let currIsRc = (currTag.indexOf("rc") != -1);

            const {data: allTags} = await github.rest.repos.listTags({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            const allTagNames = allTags.map(x => x.name);

            const sortedTags = allTagNames.sort(semVerSort).reverse();
            const relevantTags = sortedTags.filter(x => (currIsRc ? true : x.indexOf("rc") == -1));

            let releaseNoteOptions = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: "${{ inputs.ref_name }}",
            };

            let currTagIdx = relevantTags.indexOf(currTag);
            if (currTagIdx != -1 && currTagIdx + 1 < relevantTags.length) {
              releaseNoteOptions.previous_tag_name = relevantTags[currTagIdx + 1];
            }
            core.info(`releaseNoteOptions: ${JSON.stringify(releaseNoteOptions)}`);

            const {data: releaseNotes} = await github.rest.repos.generateReleaseNotes(
              releaseNoteOptions
            );

            const {data: response} = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: "${{ inputs.ref_name }}",
              body: releaseNotes.body,
              prerelease: currIsRc,
            });

            const {data: assetResponse} = await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: response.id,
              name: "tutorial.gif",
              data: await fs.readFile("tutorial.gif"),
            });
